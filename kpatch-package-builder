#!/usr/bin/env python

from __future__ import print_function

import argparse
import logging
import os
import shutil
import string
import subprocess
import sys
import tempfile

import yaml
import jinja2

logging.basicConfig(level=logging.INFO,
                    format='kpatch-package-builder: %(message)s')

__version__ = '0.1.0'

SPEC_TEMPLATE = '''%define kernel {{ target_kernel }}.{{ target_arch }}
%define installdir /var/lib/kpatch

Name:		{{ name }}
Version:	{{ version }}
Release:	{{ release }}
Summary:	kpatch livepatch module

Group:		System Environment/Kernel
License:	GPLv2

Source0:	{{ patch_file }}

ExclusiveArch: {{ target_arch }}

%description
{{ description }}

%prep cp %SOURCE0 %{buildroot}
yumdownloader --source "kernel-{{ target_kernel }}"

%build
kpatch-build -t vmlinux --skip-gcc-check --sourcerpm "kernel-{{ target_kernel }}.src.rpm" %SOURCE0

%install
mkdir -p %{buildroot}/%{installdir}/%{kernel}
cp -f "{{ kmod_filename }}" "%{buildroot}/%{installdir}/%{kernel}"

%files
%{installdir}/%{kernel}/{{ kmod_filename }}
'''


def generate_rpm_spec(template, name, patch_file, kernel, arch,
                      version='1', release='1'):
    logging.info('generating spec file...')

    spec_template = jinja2.Template(template)

    values = {
        'name': 'kpatch-module-{}'.format(name),
        'patch_file': patch_file,
        'kmod_filename': 'kpatch-{}.ko'.format(name),
        'description': 'Package generated from {} by '
                       'kpatch-package-builder'.format(patch_file),
        'target_kernel': kernel,
        'target_arch': arch,
        'version': version,
        'release': release
    }

    return spec_template.render(values)


def get_spec_filename(patch, output=None):
    if output is None:
        out_file, _ = os.path.splitext(patch)
        out_file += '.spec'
    else:
        out_file = output

    return out_file


def exit(message):
    print(message, file=sys.stderr)
    sys.exit(1)


def get_rpm_env(var):
    try:
        var_output = subprocess.check_output(['rpm', '--eval',
                                              '"%{{{}}}"'.format(var)])
    except OSError:
        exit('You should run this on a red hat based system (missing rpm '
             'command)')
    return var_output.strip().strip('"')


def get_rpm_source_dir():
    return get_rpm_env('_sourcedir')


def get_rpm_dir():
    return get_rpm_env('_rpmdir')


def get_rpm_name(name, arch, version, release):
    return '{name}-{version}-{release}.{arch}.rpm'.format(name=name,
                                                          arch=arch,
                                                          version=version,
                                                          release=release)


def get_absolute_rpm_path(name, arch, version, release):
    rpm = get_rpm_name(name, arch, version, release)
    return os.path.join(get_rpm_dir(), arch, rpm)


def setup_rpmtree():
    try:
        subprocess.call('rpmdev-setuptree')
    except OSError:
        exit('You should install rpmdevtools before you do this')


def copy_to_rpm_source(source):
    dest = os.path.join(get_rpm_source_dir(),
                        os.path.basename(source))
    shutil.copyfile(source, dest)
    return dest


def build_rpm(patch, name, arch, spec_content, debug=False):
    logging.info('building RPM...')

    setup_rpmtree()
    copy_to_rpm_source(patch)

    spec_file_handle, spec_filename = tempfile.mkstemp(prefix='kpatch_',
                                                       suffix='.spec')
    logging.info('writing spec file to %s...', spec_filename)
    os.write(spec_file_handle, spec_content)
    os.close(spec_file_handle)

    if debug is True:
        args = ['rpmbuild', '-bb', spec_filename]
    else:
        args = ['rpmbuild', '-bb', '--quiet', spec_filename]

    subprocess.call(args)

    package_name = 'kpatch-module-{}'.format(name)
    dest = get_rpm_name(package_name, arch, 1, 1)
    logging.info('writing %s...', dest)
    shutil.move(get_absolute_rpm_path(package_name, arch, 1, 1),
                dest)


def get_kernel_release():
    with open('/proc/sys/kernel/osrelease') as f:
        release = f.read()
    return '.'.join(release.split('.')[:-1])


def build_single_package(args):
    patch = os.path.basename(args.patch)
    name, _ = os.path.splitext(patch)

    spec_content = generate_rpm_spec(SPEC_TEMPLATE,
                                     name,
                                     patch,
                                     args.kernel,
                                     args.arch,
                                     args.set_version,
                                     args.set_release)

    if args.build_rpm:
        build_rpm(args.patch, name, args.arch, spec_content, debug=args.debug)
    else:
        if args.output == '-':
            print(spec_content, end='')
        else:
            filename = get_spec_filename(args.patch, args.output)
            with open(filename, 'w') as f:
                logging.info('writing %s...', filename)
                f.write(spec_content)


def build_all_packages(args):
    with open(args.manifest) as f:
        manifest = yaml.load(f)

    packages = manifest.get('packages')

    for package in packages:
        name = package.get('name')
        version = package.get('version')
        patches = package.get('patches')

        logging.info('building kpatch-module-%s version %d...', name, version)


def get_args():
    description = '''\
Build an RPM package or an RPM spec file to install and manage a kpatch
livepatch module.'''

    epilog = '''\
Usage examples:

Build an RPM package for a given patch:

    $ kpatch-package-builder --build-rpm module.patch

Generate a spec file to later build into an RPM:


    $ kpatch-package-builder --output module.spec module.patch
'''
    parser = argparse.ArgumentParser(description=description,
                                     epilog=epilog,
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('-v', '--version',
                        action='version',
                        version='%(prog)s ' + __version__)

    input_group = parser.add_mutually_exclusive_group(required=True)
    input_group.add_argument('-p', '--patch', metavar='PATCH',
                             help='patch file from which to build the livepatch '
                                  'module')
    input_group.add_argument('--manifest', metavar='FILE',
                             help='manifest file describing a mapping between '
                                  'packages, patches and kernel versions')

    output_group = parser.add_mutually_exclusive_group()
    output_group.add_argument('-o', '--output', metavar='FILE', default=None,
                              help='name of output spec file')

    output_group.add_argument('-b', '--build-rpm', action='store_true',
                              help='build an RPM package')

    parser.add_argument('-k', '--kernel', metavar='VERSION',
                        default=get_kernel_release(),
                        help='target kernel version to build the livepatch '
                             'module against. Defaults to the currently '
                             'running version')

    parser.add_argument('-a', '--arch', metavar='ARCH', default='x86_64',
                        help='architecture to compile the patch against')

    parser.add_argument('--set-release', metavar='NUM', default='1',
                        help='package release version')

    parser.add_argument('--set-version', metavar='NUM', default='1',
                        help='package version number')

    parser.add_argument('-d', '--debug', action='store_true',
                       help='print debug information')

    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()

    if args.patch is not None:
        build_single_package(args)
    else:
        build_all_packages(args)
