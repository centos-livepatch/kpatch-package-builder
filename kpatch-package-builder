#!/usr/bin/env python

from __future__ import print_function

import argparse
import os
import shutil
import string
import subprocess
import sys
import tempfile

SPEC_TEMPLATE = '''%define kernel $target_kernel.$target_arch
%define installdir /var/lib/kpatch

Name:		$name
Version:	1
Release:	1%{?dist}
Summary:	kpatch livepatch module

Group:		System Environment/Kernel
License:	GPLv2

Source0:	$patch_file

ExclusiveArch: $target_arch

%description
$description

%prep cp %SOURCE0 %{buildroot}
yumdownloader --source "kernel-$target_kernel"

%build
kpatch-build -t vmlinux --skip-gcc-check --sourcerpm "kernel-$target_kernel.src.rpm" %SOURCE0

%install
mkdir -p %{buildroot}/%{installdir}/%{kernel}
cp -f "$kmod_filename" "%{buildroot}/%{installdir}/%{kernel}"

%files
%{installdir}/%{kernel}/$kmod_filename
'''


def generate_rpm_spec(template, name, patch_file, kernel, arch):
    spec_template = string.Template(template)

    values = {
        'name': 'kpatch-module-{}'.format(name),
        'patch_file': patch_file,
        'kmod_filename': 'kpatch-{}.ko'.format(base_name),
        'description': 'Package generated from {} by '
                       'kpatch-package-builder'.format(patch_file),
        'target_kernel': kernel,
        'target_arch': arch,
    }

    return spec_template.substitute(values)


def get_spec_filename(patch, output=None):
    if output is None:
        out_file, _ = os.path.splitext(patch)
        out_file += '.spec'
    else:
        out_file = output

    return out_file


def exit(message):
    print(message, file=sys.stderr)
    sys.exit(1)


def get_rpm_source_dir():
    try:
        sources = subprocess.check_output(['rpm', '--eval', '"%{_sourcedir}"'])
    except OSError:
        exit('You should run this on a red hat based system (missing rpm '
             'command)')
    return sources.strip().strip('"')


def get_rpm_name(name, arch, version, release):
    return '{name}-{version}-{release}.{arch}.rpm'.format(name=name,
                                                          arch=arch,
                                                          version=version,
                                                          release=release)


def get_absolute_rpm_path(name, arch, version, release):
    rpm = get_rpm_name(name, arch, version, release)
    return os.path.join(get_rpm_source_dir(), arch, rpm)


def setup_rpmtree():
    try:
        subprocess.call('rpmdev-setuptree')
    except OSError:
        exit('You should install rpmdevtools before you do this')


def copy_to_rpm_source(source):
    dest = os.path.join(get_rpm_source_dir(),
                        os.path.basename(source))
    shutil.copyfile(source, dest)
    return dest


def build_rpm(patch, name, arch, spec_content):
    setup_rpmtree()
    copy_to_rpm_source(patch)

    spec_file_handle, spec_filename = tempfile.mkstemp(prefix='kpatch_',
                                                       suffix='.spec')
    os.write(spec_file_handle, spec_content)
    os.close(spec_file_handle)

    shutil.move(get_absolute_rpm_path(name, arch, 1, 1),
                get_rpm_name(name, arch, 1, 1))

    subprocess.call(['rpmbuild', '-bb', spec_filename])


def get_args():
    description = '''\
Build an RPM package or an RPM spec file to install and manage a kpatch
livepatch module.'''

    epilog = '''\
Usage examples:

Build an RPM package for a given patch:

    $ kpatch-package-builder --build-rpm module.patch

Generate a spec file to later build into an RPM:


    $ kpatch-package-builder --output module.spec module.patch
'''
    parser = argparse.ArgumentParser(description=description,
                                     epilog=epilog,
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('patch', metavar='PATCH',
                        help='patch file from which to build the livepatch '
                             'module')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('-o', '--output', metavar='FILE', default=None,
                       help='name of output spec file')
    group.add_argument('-b', '--build-rpm', action='store_true',
                       help='build an RPM package')

    parser.add_argument('-k', '--kernel', metavar='VERSION',
                        default='3.10.0-229.el7',
                        help='target kernel version to build the livepatch '
                             'module against')
    parser.add_argument('-a', '--arch', metavar='ARCH', default='x86_64',
                        help='architecture to compile the patch against')

    return parser.parse_args()


if __name__ == '__main__':
    args = get_args()

    patch = os.path.basename(args.patch)
    name, _ = os.path.splitext(patch)

    spec_content = generate_rpm_spec(SPEC_TEMPLATE,
                                     patch,
                                     'kpatch-module-'+name,
                                     args.kernel,
                                     args.arch)

    if args.build_rpm:
        build_rpm(args.patch, args.arch, spec_content)
    else:
        if args.output == '-':
            print(spec_content, end='')
        else:
            with open(get_spec_filename(args.patch, args.output), 'w') as f:
                f.write(spec_content)
